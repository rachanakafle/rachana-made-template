pipeline CarsPipeline{
     
    //getting dataset from given url
    block CarsExtractor oftype HttpExtractor{	
        	url: "https://www-genesis.destatis.de/genesis/downloads/00/tables/46251-0021_00.csv";
    }	
    // interpreting the file
    block CarsTextFileInterpreter oftype TextFileInterpreter{

    // applying encoding 
    encoding: "latin6"; 
    }
    //converting to csv
    block CarsDataCSVFInterpreter oftype CSVInterpreter{
        delimiter: ";";

    }
     // deleting rows
    block CarsRowDeleter oftype RowDeleter {
        delete: 
        [row 1, row 2, row 3, row 4, row 5, row 6, row 484, row 485, row 487]; 
        
    }
    //deleting columns
    block CarsColumnDeleter oftype ColumnDeleter {
        delete: [column D, column E, column F, column G, column H, column I, column J, column K, column L, column N,
                 column O, column P, column Q, column R, column S, column T, column U, column V, column X, column Y, column Z, column AM,
                 column AZ, column AB, column AS, column AU, column AT, column AH,column AI, column AJ, column AK, column AL, column AA, column AN, 
                 column AO, column AR, column AD, column AF, column AE, column AX, column AW, column AV, column AY, column AC, column BM, column BO,
                 column BD, column BE, column BF, column BG, column BH, column BI, column BJ, column BK, column BL, column BB, column BN, column BC,
                 column BP, column BQ, column BR, column BS, column BT];
    }
    //converting csv to table
    block CarsTableInterpreter oftype TableInterpreter{
        header:false;
        columns: [
            "date" oftype text,
            "CIN" oftype CINLength,
            "name" oftype text,
            "petrol" oftype positiveNumber,
            "diesel" oftype positiveNumber,
            "gas" oftype positiveNumber,
            "electro" oftype positiveNumber,
            "hybrid" oftype positiveNumber,
            "plugInHybrid" oftype positiveNumber,
            "others" oftype positiveNumber

		];
    }
    // generating sqlite from table
    block CarsSQLiteInterpreter oftype SQLiteLoader {
		 table: "cars";
         file: "cars.sqlite";
    }
    //making regex for strings with 5 characters, and can have a leading 0
    constraint maxminfive oftype RegexConstraint {
    regex: /^.{5}$/;
  }
    
    valuetype CINLength oftype text {
        constraints: [maxminfive];
    }

   
    constraint positiveNumberConst oftype RangeConstraint {
        lowerBound: 0;
    }

    valuetype positiveNumber oftype integer {
        constraints: [positiveNumberConst];
    }
    //combing all
    CarsExtractor
        ->CarsTextFileInterpreter
        ->CarsDataCSVFInterpreter
        ->CarsRowDeleter
        ->CarsColumnDeleter
        ->CarsTableInterpreter
        ->CarsSQLiteInterpreter;

}



